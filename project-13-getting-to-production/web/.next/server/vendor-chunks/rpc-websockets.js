"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rpc-websockets";
exports.ids = ["vendor-chunks/rpc-websockets"];
exports.modules = {

/***/ "(ssr)/../node_modules/rpc-websockets/dist/lib/client.cjs":
/*!**********************************************************!*\
  !*** ../node_modules/rpc-websockets/dist/lib/client.cjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// @ts-ignore\nconst eventemitter3_1 = __webpack_require__(/*! eventemitter3 */ \"(ssr)/../node_modules/eventemitter3/index.js\");\nconst utils_cjs_1 = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/../node_modules/rpc-websockets/dist/lib/utils.cjs\");\nclass CommonClient extends eventemitter3_1.EventEmitter {\n    /**\n     * Instantiate a Client class.\n     * @constructor\n     * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n     * @param {String} address - url to a websocket server\n     * @param {Object} options - ws options object with reconnect parameters\n     * @param {Function} generate_request_id - custom generation request Id\n     * @param {DataPack} dataPack - data pack contains encoder and decoder\n     * @return {CommonClient}\n     */ constructor(webSocketFactory, address = \"ws://localhost:8080\", { autoconnect = true, reconnect = true, reconnect_interval = 1000, max_reconnects = 5, ...rest_options } = {}, generate_request_id, dataPack){\n        super();\n        this.webSocketFactory = webSocketFactory;\n        this.queue = {};\n        this.rpc_id = 0;\n        this.address = address;\n        this.autoconnect = autoconnect;\n        this.ready = false;\n        this.reconnect = reconnect;\n        this.reconnect_timer_id = undefined;\n        this.reconnect_interval = reconnect_interval;\n        this.max_reconnects = max_reconnects;\n        this.rest_options = rest_options;\n        this.current_reconnects = 0;\n        this.generate_request_id = generate_request_id || (()=>++this.rpc_id);\n        if (!dataPack) this.dataPack = new utils_cjs_1.DefaultDataPack();\n        else this.dataPack = dataPack;\n        if (this.autoconnect) this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options\n        });\n    }\n    /**\n     * Connects to a defined server if not connected already.\n     * @method\n     * @return {Undefined}\n     */ connect() {\n        if (this.socket) return;\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options\n        });\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */ call(method, params, timeout, ws_opts) {\n        if (!ws_opts && \"object\" === typeof timeout) {\n            ws_opts = timeout;\n            timeout = null;\n        }\n        return new Promise((resolve, reject)=>{\n            if (!this.ready) return reject(new Error(\"socket not ready\"));\n            const rpc_id = this.generate_request_id(method, params);\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id\n            };\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error)=>{\n                if (error) return reject(error);\n                this.queue[rpc_id] = {\n                    promise: [\n                        resolve,\n                        reject\n                    ]\n                };\n                if (timeout) {\n                    this.queue[rpc_id].timeout = setTimeout(()=>{\n                        delete this.queue[rpc_id];\n                        reject(new Error(\"reply timeout\"));\n                    }, timeout);\n                }\n            });\n        });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */ async login(params) {\n        const resp = await this.call(\"rpc.login\", params);\n        if (!resp) throw new Error(\"authentication failed\");\n        return resp;\n    }\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */ async listMethods() {\n        return await this.call(\"__listMethods\");\n    }\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */ notify(method, params) {\n        return new Promise((resolve, reject)=>{\n            if (!this.ready) return reject(new Error(\"socket not ready\"));\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params\n            };\n            this.socket.send(this.dataPack.encode(message), (error)=>{\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */ async subscribe(event) {\n        if (typeof event === \"string\") event = [\n            event\n        ];\n        const result = await this.call(\"rpc.on\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n        return result;\n    }\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */ async unsubscribe(event) {\n        if (typeof event === \"string\") event = [\n            event\n        ];\n        const result = await this.call(\"rpc.off\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed unsubscribing from an event with: \" + result);\n        return result;\n    }\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */ close(code, data) {\n        this.socket.close(code || 1000, data);\n    }\n    /**\n     * Enable / disable automatic reconnection.\n     * @method\n     * @param {Boolean} reconnect - enable / disable reconnection\n     * @return {Undefined}\n     */ setAutoReconnect(reconnect) {\n        this.reconnect = reconnect;\n    }\n    /**\n     * Set the interval between reconnection attempts.\n     * @method\n     * @param {Number} interval - reconnection interval in milliseconds\n     * @return {Undefined}\n     */ setReconnectInterval(interval) {\n        this.reconnect_interval = interval;\n    }\n    /**\n     * Set the maximum number of reconnection attempts.\n     * @method\n     * @param {Number} max_reconnects - maximum reconnection attempts\n     * @return {Undefined}\n     */ setMaxReconnects(max_reconnects) {\n        this.max_reconnects = max_reconnects;\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */ _connect(address, options) {\n        clearTimeout(this.reconnect_timer_id);\n        this.socket = this.webSocketFactory(address, options);\n        this.socket.addEventListener(\"open\", ()=>{\n            this.ready = true;\n            this.emit(\"open\");\n            this.current_reconnects = 0;\n        });\n        this.socket.addEventListener(\"message\", ({ data: message })=>{\n            if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n            try {\n                message = this.dataPack.decode(message);\n            } catch (error) {\n                return;\n            }\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length) {\n                if (!Object.keys(message.params).length) return this.emit(message.notification);\n                const args = [\n                    message.notification\n                ];\n                if (message.params.constructor === Object) args.push(message.params);\n                else // using for-loop instead of unshift/spread because performance is better\n                for(let i = 0; i < message.params.length; i++)args.push(message.params[i]);\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(()=>{\n                    this.emit.apply(this, args);\n                });\n            }\n            if (!this.queue[message.id]) {\n                // general JSON RPC 2.0 events\n                if (message.method) {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(()=>{\n                        this.emit(message.method, message?.params);\n                    });\n                }\n                return;\n            }\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message) this.queue[message.id].promise[1](new Error('Server response malformed. Response must include either \"result\"' + ' or \"error\", but not both.'));\n            if (this.queue[message.id].timeout) clearTimeout(this.queue[message.id].timeout);\n            if (message.error) this.queue[message.id].promise[1](message.error);\n            else this.queue[message.id].promise[0](message.result);\n            delete this.queue[message.id];\n        });\n        this.socket.addEventListener(\"error\", (error)=>this.emit(\"error\", error));\n        this.socket.addEventListener(\"close\", ({ code, reason })=>{\n            if (this.ready) setTimeout(()=>this.emit(\"close\", code, reason), 0);\n            this.ready = false;\n            this.socket = undefined;\n            if (code === 1000) return;\n            this.current_reconnects++;\n            if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0)) this.reconnect_timer_id = setTimeout(()=>this._connect(address, options), this.reconnect_interval);\n        });\n    }\n}\nexports[\"default\"] = CommonClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/rpc-websockets/dist/lib/client.cjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/rpc-websockets/dist/lib/client/websocket.cjs":
/*!********************************************************************!*\
  !*** ../node_modules/rpc-websockets/dist/lib/client/websocket.cjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/* A wrapper for the \"qaap/uws-bindings\" library. */ \nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ws_1 = __importDefault(__webpack_require__(/*! ws */ \"(ssr)/../node_modules/ws/index.js\"));\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */ function default_1(address, options) {\n    return new ws_1.default(address, options);\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3JwYy13ZWJzb2NrZXRzL2Rpc3QvbGliL2NsaWVudC93ZWJzb2NrZXQuY2pzIiwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRCxHQUNyQztBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsT0FBT1AsZ0JBQWdCUSxtQkFBT0EsQ0FBQyw2Q0FBSTtBQUN6Qzs7Ozs7O0NBTUMsR0FDRCxTQUFTQyxVQUFVQyxPQUFPLEVBQUVDLE9BQU87SUFDL0IsT0FBTyxJQUFJSixLQUFLSyxPQUFPLENBQUNGLFNBQVNDO0FBQ3JDO0FBQ0FOLGtCQUFlLEdBQUdJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9ycGMtd2Vic29ja2V0cy9kaXN0L2xpYi9jbGllbnQvd2Vic29ja2V0LmNqcz9kZGI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIEEgd3JhcHBlciBmb3IgdGhlIFwicWFhcC91d3MtYmluZGluZ3NcIiBsaWJyYXJ5LiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB3c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJ3c1wiKSk7XG4vKipcbiAqIGZhY3RvcnkgbWV0aG9kIGZvciBjb21tb24gV2ViU29ja2V0IGluc3RhbmNlXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyAtIHVybCB0byBhIHdlYnNvY2tldCBzZXJ2ZXJcbiAqIEBwYXJhbSB7KE9iamVjdCl9IG9wdGlvbnMgLSB3ZWJzb2NrZXQgb3B0aW9uc1xuICogQHJldHVybiB7VW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBkZWZhdWx0XzEoYWRkcmVzcywgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgd3NfMS5kZWZhdWx0KGFkZHJlc3MsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndzXzEiLCJyZXF1aXJlIiwiZGVmYXVsdF8xIiwiYWRkcmVzcyIsIm9wdGlvbnMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/rpc-websockets/dist/lib/client/websocket.cjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/rpc-websockets/dist/lib/utils.cjs":
/*!*********************************************************!*\
  !*** ../node_modules/rpc-websockets/dist/lib/utils.cjs ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createError = exports.DefaultDataPack = void 0;\nconst errors = new Map([\n    [\n        -32000,\n        \"Event not provided\"\n    ],\n    [\n        -32600,\n        \"Invalid Request\"\n    ],\n    [\n        -32601,\n        \"Method not found\"\n    ],\n    [\n        -32602,\n        \"Invalid params\"\n    ],\n    [\n        -32603,\n        \"Internal error\"\n    ],\n    [\n        -32604,\n        \"Params not found\"\n    ],\n    [\n        -32605,\n        \"Method forbidden\"\n    ],\n    [\n        -32606,\n        \"Event forbidden\"\n    ],\n    [\n        -32700,\n        \"Parse error\"\n    ]\n]);\nclass DefaultDataPack {\n    encode(value) {\n        return JSON.stringify(value);\n    }\n    decode(value) {\n        return JSON.parse(value);\n    }\n}\nexports.DefaultDataPack = DefaultDataPack;\n/**\n * Creates a JSON-RPC 2.0-compliant error.\n * @param {Number} code - error code\n * @param {String} details - error details\n * @return {Object}\n */ function createError(code, details) {\n    const error = {\n        code: code,\n        message: errors.get(code) || \"Internal Server Error\"\n    };\n    if (details) error[\"data\"] = details;\n    return error;\n}\nexports.createError = createError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3JwYy13ZWJzb2NrZXRzL2Rpc3QvbGliL3V0aWxzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDckQsTUFBTUksU0FBUyxJQUFJQyxJQUFJO0lBQ25CO1FBQUMsQ0FBQztRQUFPO0tBQXFCO0lBQzlCO1FBQUMsQ0FBQztRQUFPO0tBQWtCO0lBQzNCO1FBQUMsQ0FBQztRQUFPO0tBQW1CO0lBQzVCO1FBQUMsQ0FBQztRQUFPO0tBQWlCO0lBQzFCO1FBQUMsQ0FBQztRQUFPO0tBQWlCO0lBQzFCO1FBQUMsQ0FBQztRQUFPO0tBQW1CO0lBQzVCO1FBQUMsQ0FBQztRQUFPO0tBQW1CO0lBQzVCO1FBQUMsQ0FBQztRQUFPO0tBQWtCO0lBQzNCO1FBQUMsQ0FBQztRQUFPO0tBQWM7Q0FDMUI7QUFDRCxNQUFNRjtJQUNGRyxPQUFPTCxLQUFLLEVBQUU7UUFDVixPQUFPTSxLQUFLQyxTQUFTLENBQUNQO0lBQzFCO0lBQ0FRLE9BQU9SLEtBQUssRUFBRTtRQUNWLE9BQU9NLEtBQUtHLEtBQUssQ0FBQ1Q7SUFDdEI7QUFDSjtBQUNBRCx1QkFBdUIsR0FBR0c7QUFDMUI7Ozs7O0NBS0MsR0FDRCxTQUFTRCxZQUFZUyxJQUFJLEVBQUVDLE9BQU87SUFDOUIsTUFBTUMsUUFBUTtRQUNWRixNQUFNQTtRQUNORyxTQUFTVixPQUFPVyxHQUFHLENBQUNKLFNBQVM7SUFDakM7SUFDQSxJQUFJQyxTQUNBQyxLQUFLLENBQUMsT0FBTyxHQUFHRDtJQUNwQixPQUFPQztBQUNYO0FBQ0FiLG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcnBjLXdlYnNvY2tldHMvZGlzdC9saWIvdXRpbHMuY2pzP2MxZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUVycm9yID0gZXhwb3J0cy5EZWZhdWx0RGF0YVBhY2sgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnMgPSBuZXcgTWFwKFtcbiAgICBbLTMyMDAwLCBcIkV2ZW50IG5vdCBwcm92aWRlZFwiXSxcbiAgICBbLTMyNjAwLCBcIkludmFsaWQgUmVxdWVzdFwiXSxcbiAgICBbLTMyNjAxLCBcIk1ldGhvZCBub3QgZm91bmRcIl0sXG4gICAgWy0zMjYwMiwgXCJJbnZhbGlkIHBhcmFtc1wiXSxcbiAgICBbLTMyNjAzLCBcIkludGVybmFsIGVycm9yXCJdLFxuICAgIFstMzI2MDQsIFwiUGFyYW1zIG5vdCBmb3VuZFwiXSxcbiAgICBbLTMyNjA1LCBcIk1ldGhvZCBmb3JiaWRkZW5cIl0sXG4gICAgWy0zMjYwNiwgXCJFdmVudCBmb3JiaWRkZW5cIl0sXG4gICAgWy0zMjcwMCwgXCJQYXJzZSBlcnJvclwiXVxuXSk7XG5jbGFzcyBEZWZhdWx0RGF0YVBhY2sge1xuICAgIGVuY29kZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGVmYXVsdERhdGFQYWNrID0gRGVmYXVsdERhdGFQYWNrO1xuLyoqXG4gKiBDcmVhdGVzIGEgSlNPTi1SUEMgMi4wLWNvbXBsaWFudCBlcnJvci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIC0gZXJyb3IgY29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGRldGFpbHMgLSBlcnJvciBkZXRhaWxzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yKGNvZGUsIGRldGFpbHMpIHtcbiAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3JzLmdldChjb2RlKSB8fCBcIkludGVybmFsIFNlcnZlciBFcnJvclwiXG4gICAgfTtcbiAgICBpZiAoZGV0YWlscylcbiAgICAgICAgZXJyb3JbXCJkYXRhXCJdID0gZGV0YWlscztcbiAgICByZXR1cm4gZXJyb3I7XG59XG5leHBvcnRzLmNyZWF0ZUVycm9yID0gY3JlYXRlRXJyb3I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVFcnJvciIsIkRlZmF1bHREYXRhUGFjayIsImVycm9ycyIsIk1hcCIsImVuY29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWNvZGUiLCJwYXJzZSIsImNvZGUiLCJkZXRhaWxzIiwiZXJyb3IiLCJtZXNzYWdlIiwiZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/rpc-websockets/dist/lib/utils.cjs\n");

/***/ })

};
;